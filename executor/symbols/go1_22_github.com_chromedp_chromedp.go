// Code generated by 'yaegi extract github.com/chromedp/chromedp'. DO NOT EDIT.

package symbols

import (
	"context"
	"github.com/chromedp/cdproto"
	"github.com/chromedp/chromedp"
	"github.com/chromedp/chromedp/device"
	"reflect"
)

func init() {
	Symbols["github.com/chromedp/chromedp/chromedp"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"After":                       reflect.ValueOf(chromedp.After),
		"AtLeast":                     reflect.ValueOf(chromedp.AtLeast),
		"AttributeValue":              reflect.ValueOf(chromedp.AttributeValue),
		"Attributes":                  reflect.ValueOf(chromedp.Attributes),
		"AttributesAll":               reflect.ValueOf(chromedp.AttributesAll),
		"Blur":                        reflect.ValueOf(chromedp.Blur),
		"Button":                      reflect.ValueOf(chromedp.Button),
		"ButtonLeft":                  reflect.ValueOf(chromedp.ButtonLeft),
		"ButtonMiddle":                reflect.ValueOf(chromedp.ButtonMiddle),
		"ButtonModifiers":             reflect.ValueOf(chromedp.ButtonModifiers),
		"ButtonNone":                  reflect.ValueOf(chromedp.ButtonNone),
		"ButtonRight":                 reflect.ValueOf(chromedp.ButtonRight),
		"ButtonType":                  reflect.ValueOf(chromedp.ButtonType),
		"ByFunc":                      reflect.ValueOf(chromedp.ByFunc),
		"ByID":                        reflect.ValueOf(chromedp.ByID),
		"ByJSPath":                    reflect.ValueOf(chromedp.ByJSPath),
		"ByNodeID":                    reflect.ValueOf(chromedp.ByNodeID),
		"ByQuery":                     reflect.ValueOf(chromedp.ByQuery),
		"ByQueryAll":                  reflect.ValueOf(chromedp.ByQueryAll),
		"BySearch":                    reflect.ValueOf(chromedp.BySearch),
		"CallFunctionOn":              reflect.ValueOf(chromedp.CallFunctionOn),
		"Cancel":                      reflect.ValueOf(chromedp.Cancel),
		"CaptureScreenshot":           reflect.ValueOf(chromedp.CaptureScreenshot),
		"Clear":                       reflect.ValueOf(chromedp.Clear),
		"Click":                       reflect.ValueOf(chromedp.Click),
		"ClickCount":                  reflect.ValueOf(chromedp.ClickCount),
		"CombinedOutput":              reflect.ValueOf(chromedp.CombinedOutput),
		"ComputedStyle":               reflect.ValueOf(chromedp.ComputedStyle),
		"DefaultExecAllocatorOptions": reflect.ValueOf(&chromedp.DefaultExecAllocatorOptions).Elem(),
		"DialContext":                 reflect.ValueOf(chromedp.DialContext),
		"Dimensions":                  reflect.ValueOf(chromedp.Dimensions),
		"DisableGPU":                  reflect.ValueOf(chromedp.DisableGPU),
		"DoubleClick":                 reflect.ValueOf(chromedp.DoubleClick),
		"Dump":                        reflect.ValueOf(chromedp.Dump),
		"DumpTo":                      reflect.ValueOf(chromedp.DumpTo),
		"Emulate":                     reflect.ValueOf(chromedp.Emulate),
		"EmulateLandscape":            reflect.ValueOf(chromedp.EmulateLandscape),
		"EmulateMobile":               reflect.ValueOf(chromedp.EmulateMobile),
		"EmulateOrientation":          reflect.ValueOf(chromedp.EmulateOrientation),
		"EmulatePortrait":             reflect.ValueOf(chromedp.EmulatePortrait),
		"EmulateReset":                reflect.ValueOf(chromedp.EmulateReset),
		"EmulateScale":                reflect.ValueOf(chromedp.EmulateScale),
		"EmulateTouch":                reflect.ValueOf(chromedp.EmulateTouch),
		"EmulateViewport":             reflect.ValueOf(chromedp.EmulateViewport),
		"Env":                         reflect.ValueOf(chromedp.Env),
		"ErrChannelClosed":            reflect.ValueOf(chromedp.ErrChannelClosed),
		"ErrDisabled":                 reflect.ValueOf(chromedp.ErrDisabled),
		"ErrHasResults":               reflect.ValueOf(chromedp.ErrHasResults),
		"ErrInvalidBoxModel":          reflect.ValueOf(chromedp.ErrInvalidBoxModel),
		"ErrInvalidContext":           reflect.ValueOf(chromedp.ErrInvalidContext),
		"ErrInvalidDimensions":        reflect.ValueOf(chromedp.ErrInvalidDimensions),
		"ErrInvalidTarget":            reflect.ValueOf(chromedp.ErrInvalidTarget),
		"ErrInvalidWebsocketMessage":  reflect.ValueOf(chromedp.ErrInvalidWebsocketMessage),
		"ErrJSNull":                   reflect.ValueOf(chromedp.ErrJSNull),
		"ErrJSUndefined":              reflect.ValueOf(chromedp.ErrJSUndefined),
		"ErrNoResults":                reflect.ValueOf(chromedp.ErrNoResults),
		"ErrNotSelected":              reflect.ValueOf(chromedp.ErrNotSelected),
		"ErrNotVisible":               reflect.ValueOf(chromedp.ErrNotVisible),
		"ErrPollingTimeout":           reflect.ValueOf(chromedp.ErrPollingTimeout),
		"ErrVisible":                  reflect.ValueOf(chromedp.ErrVisible),
		"EvalAsValue":                 reflect.ValueOf(chromedp.EvalAsValue),
		"EvalIgnoreExceptions":        reflect.ValueOf(chromedp.EvalIgnoreExceptions),
		"EvalObjectGroup":             reflect.ValueOf(chromedp.EvalObjectGroup),
		"EvalWithCommandLineAPI":      reflect.ValueOf(chromedp.EvalWithCommandLineAPI),
		"Evaluate":                    reflect.ValueOf(chromedp.Evaluate),
		"EvaluateAsDevTools":          reflect.ValueOf(chromedp.EvaluateAsDevTools),
		"ExecPath":                    reflect.ValueOf(chromedp.ExecPath),
		"Flag":                        reflect.ValueOf(chromedp.Flag),
		"Focus":                       reflect.ValueOf(chromedp.Focus),
		"FromContext":                 reflect.ValueOf(chromedp.FromContext),
		"FromNode":                    reflect.ValueOf(chromedp.FromNode),
		"FullScreenshot":              reflect.ValueOf(chromedp.FullScreenshot),
		"Headless":                    reflect.ValueOf(chromedp.Headless),
		"IgnoreCertErrors":            reflect.ValueOf(chromedp.IgnoreCertErrors),
		"InnerHTML":                   reflect.ValueOf(chromedp.InnerHTML),
		"JavascriptAttribute":         reflect.ValueOf(chromedp.JavascriptAttribute),
		"KeyEvent":                    reflect.ValueOf(chromedp.KeyEvent),
		"KeyEventNode":                reflect.ValueOf(chromedp.KeyEventNode),
		"KeyModifiers":                reflect.ValueOf(chromedp.KeyModifiers),
		"ListenBrowser":               reflect.ValueOf(chromedp.ListenBrowser),
		"ListenTarget":                reflect.ValueOf(chromedp.ListenTarget),
		"Location":                    reflect.ValueOf(chromedp.Location),
		"MatchedStyle":                reflect.ValueOf(chromedp.MatchedStyle),
		"ModifyCmdFunc":               reflect.ValueOf(chromedp.ModifyCmdFunc),
		"MouseClickNode":              reflect.ValueOf(chromedp.MouseClickNode),
		"MouseClickXY":                reflect.ValueOf(chromedp.MouseClickXY),
		"MouseEvent":                  reflect.ValueOf(chromedp.MouseEvent),
		"Navigate":                    reflect.ValueOf(chromedp.Navigate),
		"NavigateBack":                reflect.ValueOf(chromedp.NavigateBack),
		"NavigateForward":             reflect.ValueOf(chromedp.NavigateForward),
		"NavigateToHistoryEntry":      reflect.ValueOf(chromedp.NavigateToHistoryEntry),
		"NavigationEntries":           reflect.ValueOf(chromedp.NavigationEntries),
		"NewBrowser":                  reflect.ValueOf(chromedp.NewBrowser),
		"NewContext":                  reflect.ValueOf(chromedp.NewContext),
		"NewExecAllocator":            reflect.ValueOf(chromedp.NewExecAllocator),
		"NewRemoteAllocator":          reflect.ValueOf(chromedp.NewRemoteAllocator),
		"NoDefaultBrowserCheck":       reflect.ValueOf(chromedp.NoDefaultBrowserCheck),
		"NoFirstRun":                  reflect.ValueOf(chromedp.NoFirstRun),
		"NoModifyURL":                 reflect.ValueOf(chromedp.NoModifyURL),
		"NoSandbox":                   reflect.ValueOf(chromedp.NoSandbox),
		"NodeEnabled":                 reflect.ValueOf(chromedp.NodeEnabled),
		"NodeIDs":                     reflect.ValueOf(chromedp.NodeIDs),
		"NodeNotPresent":              reflect.ValueOf(chromedp.NodeNotPresent),
		"NodeNotVisible":              reflect.ValueOf(chromedp.NodeNotVisible),
		"NodeReady":                   reflect.ValueOf(chromedp.NodeReady),
		"NodeSelected":                reflect.ValueOf(chromedp.NodeSelected),
		"NodeVisible":                 reflect.ValueOf(chromedp.NodeVisible),
		"Nodes":                       reflect.ValueOf(chromedp.Nodes),
		"OuterHTML":                   reflect.ValueOf(chromedp.OuterHTML),
		"Poll":                        reflect.ValueOf(chromedp.Poll),
		"PollFunction":                reflect.ValueOf(chromedp.PollFunction),
		"Populate":                    reflect.ValueOf(chromedp.Populate),
		"PopulateWait":                reflect.ValueOf(chromedp.PopulateWait),
		"ProxyServer":                 reflect.ValueOf(chromedp.ProxyServer),
		"Query":                       reflect.ValueOf(chromedp.Query),
		"QueryAfter":                  reflect.ValueOf(chromedp.QueryAfter),
		"Reload":                      reflect.ValueOf(chromedp.Reload),
		"RemoveAttribute":             reflect.ValueOf(chromedp.RemoveAttribute),
		"Reset":                       reflect.ValueOf(chromedp.Reset),
		"ResetViewport":               reflect.ValueOf(chromedp.ResetViewport),
		"RetryInterval":               reflect.ValueOf(chromedp.RetryInterval),
		"Run":                         reflect.ValueOf(chromedp.Run),
		"RunResponse":                 reflect.ValueOf(chromedp.RunResponse),
		"Screenshot":                  reflect.ValueOf(chromedp.Screenshot),
		"ScreenshotNodes":             reflect.ValueOf(chromedp.ScreenshotNodes),
		"ScreenshotScale":             reflect.ValueOf(chromedp.ScreenshotScale),
		"ScrollIntoView":              reflect.ValueOf(chromedp.ScrollIntoView),
		"SendKeys":                    reflect.ValueOf(chromedp.SendKeys),
		"SetAttributeValue":           reflect.ValueOf(chromedp.SetAttributeValue),
		"SetAttributes":               reflect.ValueOf(chromedp.SetAttributes),
		"SetJavascriptAttribute":      reflect.ValueOf(chromedp.SetJavascriptAttribute),
		"SetUploadFiles":              reflect.ValueOf(chromedp.SetUploadFiles),
		"SetValue":                    reflect.ValueOf(chromedp.SetValue),
		"Sleep":                       reflect.ValueOf(chromedp.Sleep),
		"Stop":                        reflect.ValueOf(chromedp.Stop),
		"Submit":                      reflect.ValueOf(chromedp.Submit),
		"Targets":                     reflect.ValueOf(chromedp.Targets),
		"Text":                        reflect.ValueOf(chromedp.Text),
		"TextContent":                 reflect.ValueOf(chromedp.TextContent),
		"Title":                       reflect.ValueOf(chromedp.Title),
		"UserAgent":                   reflect.ValueOf(chromedp.UserAgent),
		"UserDataDir":                 reflect.ValueOf(chromedp.UserDataDir),
		"Value":                       reflect.ValueOf(chromedp.Value),
		"WSURLReadTimeout":            reflect.ValueOf(chromedp.WSURLReadTimeout),
		"WaitEnabled":                 reflect.ValueOf(chromedp.WaitEnabled),
		"WaitFunc":                    reflect.ValueOf(chromedp.WaitFunc),
		"WaitNewTarget":               reflect.ValueOf(chromedp.WaitNewTarget),
		"WaitNotPresent":              reflect.ValueOf(chromedp.WaitNotPresent),
		"WaitNotVisible":              reflect.ValueOf(chromedp.WaitNotVisible),
		"WaitReady":                   reflect.ValueOf(chromedp.WaitReady),
		"WaitSelected":                reflect.ValueOf(chromedp.WaitSelected),
		"WaitVisible":                 reflect.ValueOf(chromedp.WaitVisible),
		"WindowSize":                  reflect.ValueOf(chromedp.WindowSize),
		"WithBrowserDebugf":           reflect.ValueOf(chromedp.WithBrowserDebugf),
		"WithBrowserErrorf":           reflect.ValueOf(chromedp.WithBrowserErrorf),
		"WithBrowserLogf":             reflect.ValueOf(chromedp.WithBrowserLogf),
		"WithBrowserOption":           reflect.ValueOf(chromedp.WithBrowserOption),
		"WithConnDebugf":              reflect.ValueOf(chromedp.WithConnDebugf),
		"WithConsolef":                reflect.ValueOf(chromedp.WithConsolef),
		"WithDebugf":                  reflect.ValueOf(chromedp.WithDebugf),
		"WithDialTimeout":             reflect.ValueOf(chromedp.WithDialTimeout),
		"WithErrorf":                  reflect.ValueOf(chromedp.WithErrorf),
		"WithExistingBrowserContext":  reflect.ValueOf(chromedp.WithExistingBrowserContext),
		"WithLogf":                    reflect.ValueOf(chromedp.WithLogf),
		"WithNewBrowserContext":       reflect.ValueOf(chromedp.WithNewBrowserContext),
		"WithPollingArgs":             reflect.ValueOf(chromedp.WithPollingArgs),
		"WithPollingInFrame":          reflect.ValueOf(chromedp.WithPollingInFrame),
		"WithPollingInterval":         reflect.ValueOf(chromedp.WithPollingInterval),
		"WithPollingMutation":         reflect.ValueOf(chromedp.WithPollingMutation),
		"WithPollingTimeout":          reflect.ValueOf(chromedp.WithPollingTimeout),
		"WithTargetID":                reflect.ValueOf(chromedp.WithTargetID),

		// type definitions
		"Action":                     reflect.ValueOf((*chromedp.Action)(nil)),
		"ActionFunc":                 reflect.ValueOf((*chromedp.ActionFunc)(nil)),
		"Allocator":                  reflect.ValueOf((*chromedp.Allocator)(nil)),
		"Browser":                    reflect.ValueOf((*chromedp.Browser)(nil)),
		"BrowserOption":              reflect.ValueOf((*chromedp.BrowserOption)(nil)),
		"CallAction":                 reflect.ValueOf((*chromedp.CallAction)(nil)),
		"CallOption":                 reflect.ValueOf((*chromedp.CallOption)(nil)),
		"Conn":                       reflect.ValueOf((*chromedp.Conn)(nil)),
		"Context":                    reflect.ValueOf((*chromedp.Context)(nil)),
		"ContextOption":              reflect.ValueOf((*chromedp.ContextOption)(nil)),
		"CreateBrowserContextOption": reflect.ValueOf((*chromedp.CreateBrowserContextOption)(nil)),
		"Device":                     reflect.ValueOf((*chromedp.Device)(nil)),
		"DialOption":                 reflect.ValueOf((*chromedp.DialOption)(nil)),
		"EmulateAction":              reflect.ValueOf((*chromedp.EmulateAction)(nil)),
		"EmulateViewportOption":      reflect.ValueOf((*chromedp.EmulateViewportOption)(nil)),
		"Error":                      reflect.ValueOf((*chromedp.Error)(nil)),
		"EvaluateAction":             reflect.ValueOf((*chromedp.EvaluateAction)(nil)),
		"EvaluateOption":             reflect.ValueOf((*chromedp.EvaluateOption)(nil)),
		"ExecAllocator":              reflect.ValueOf((*chromedp.ExecAllocator)(nil)),
		"ExecAllocatorOption":        reflect.ValueOf((*chromedp.ExecAllocatorOption)(nil)),
		"KeyAction":                  reflect.ValueOf((*chromedp.KeyAction)(nil)),
		"KeyOption":                  reflect.ValueOf((*chromedp.KeyOption)(nil)),
		"MouseAction":                reflect.ValueOf((*chromedp.MouseAction)(nil)),
		"MouseOption":                reflect.ValueOf((*chromedp.MouseOption)(nil)),
		"NavigateAction":             reflect.ValueOf((*chromedp.NavigateAction)(nil)),
		"PollAction":                 reflect.ValueOf((*chromedp.PollAction)(nil)),
		"PollOption":                 reflect.ValueOf((*chromedp.PollOption)(nil)),
		"PopulateOption":             reflect.ValueOf((*chromedp.PopulateOption)(nil)),
		"QueryAction":                reflect.ValueOf((*chromedp.QueryAction)(nil)),
		"QueryOption":                reflect.ValueOf((*chromedp.QueryOption)(nil)),
		"RemoteAllocator":            reflect.ValueOf((*chromedp.RemoteAllocator)(nil)),
		"RemoteAllocatorOption":      reflect.ValueOf((*chromedp.RemoteAllocatorOption)(nil)),
		"Selector":                   reflect.ValueOf((*chromedp.Selector)(nil)),
		"Target":                     reflect.ValueOf((*chromedp.Target)(nil)),
		"Tasks":                      reflect.ValueOf((*chromedp.Tasks)(nil)),
		"Transport":                  reflect.ValueOf((*chromedp.Transport)(nil)),

		// interface wrapper definitions
		"_Action":         reflect.ValueOf((*_github_com_chromedp_chromedp_Action)(nil)),
		"_Allocator":      reflect.ValueOf((*_github_com_chromedp_chromedp_Allocator)(nil)),
		"_CallAction":     reflect.ValueOf((*_github_com_chromedp_chromedp_CallAction)(nil)),
		"_Device":         reflect.ValueOf((*_github_com_chromedp_chromedp_Device)(nil)),
		"_EmulateAction":  reflect.ValueOf((*_github_com_chromedp_chromedp_EmulateAction)(nil)),
		"_EvaluateAction": reflect.ValueOf((*_github_com_chromedp_chromedp_EvaluateAction)(nil)),
		"_KeyAction":      reflect.ValueOf((*_github_com_chromedp_chromedp_KeyAction)(nil)),
		"_MouseAction":    reflect.ValueOf((*_github_com_chromedp_chromedp_MouseAction)(nil)),
		"_NavigateAction": reflect.ValueOf((*_github_com_chromedp_chromedp_NavigateAction)(nil)),
		"_PollAction":     reflect.ValueOf((*_github_com_chromedp_chromedp_PollAction)(nil)),
		"_QueryAction":    reflect.ValueOf((*_github_com_chromedp_chromedp_QueryAction)(nil)),
		"_Transport":      reflect.ValueOf((*_github_com_chromedp_chromedp_Transport)(nil)),
	}
}

// _github_com_chromedp_chromedp_Action is an interface wrapper for Action type
type _github_com_chromedp_chromedp_Action struct {
	IValue interface{}
	WDo    func(a0 context.Context) error
}

func (W _github_com_chromedp_chromedp_Action) Do(a0 context.Context) error {
	return W.WDo(a0)
}

// _github_com_chromedp_chromedp_Allocator is an interface wrapper for Allocator type
type _github_com_chromedp_chromedp_Allocator struct {
	IValue    interface{}
	WAllocate func(a0 context.Context, a1 ...func(*chromedp.Browser)) (*chromedp.Browser, error)
	WWait     func()
}

func (W _github_com_chromedp_chromedp_Allocator) Allocate(a0 context.Context, a1 ...func(*chromedp.Browser)) (*chromedp.Browser, error) {
	return W.WAllocate(a0, a1...)
}
func (W _github_com_chromedp_chromedp_Allocator) Wait() {
	W.WWait()
}

// _github_com_chromedp_chromedp_CallAction is an interface wrapper for CallAction type
type _github_com_chromedp_chromedp_CallAction struct {
	IValue interface{}
	WDo    func(a0 context.Context) error
}

func (W _github_com_chromedp_chromedp_CallAction) Do(a0 context.Context) error {
	return W.WDo(a0)
}

// _github_com_chromedp_chromedp_Device is an interface wrapper for Device type
type _github_com_chromedp_chromedp_Device struct {
	IValue  interface{}
	WDevice func() device.Info
}

func (W _github_com_chromedp_chromedp_Device) Device() device.Info {
	return W.WDevice()
}

// _github_com_chromedp_chromedp_EmulateAction is an interface wrapper for EmulateAction type
type _github_com_chromedp_chromedp_EmulateAction struct {
	IValue interface{}
	WDo    func(a0 context.Context) error
}

func (W _github_com_chromedp_chromedp_EmulateAction) Do(a0 context.Context) error {
	return W.WDo(a0)
}

// _github_com_chromedp_chromedp_EvaluateAction is an interface wrapper for EvaluateAction type
type _github_com_chromedp_chromedp_EvaluateAction struct {
	IValue interface{}
	WDo    func(a0 context.Context) error
}

func (W _github_com_chromedp_chromedp_EvaluateAction) Do(a0 context.Context) error {
	return W.WDo(a0)
}

// _github_com_chromedp_chromedp_KeyAction is an interface wrapper for KeyAction type
type _github_com_chromedp_chromedp_KeyAction struct {
	IValue interface{}
	WDo    func(a0 context.Context) error
}

func (W _github_com_chromedp_chromedp_KeyAction) Do(a0 context.Context) error {
	return W.WDo(a0)
}

// _github_com_chromedp_chromedp_MouseAction is an interface wrapper for MouseAction type
type _github_com_chromedp_chromedp_MouseAction struct {
	IValue interface{}
	WDo    func(a0 context.Context) error
}

func (W _github_com_chromedp_chromedp_MouseAction) Do(a0 context.Context) error {
	return W.WDo(a0)
}

// _github_com_chromedp_chromedp_NavigateAction is an interface wrapper for NavigateAction type
type _github_com_chromedp_chromedp_NavigateAction struct {
	IValue interface{}
	WDo    func(a0 context.Context) error
}

func (W _github_com_chromedp_chromedp_NavigateAction) Do(a0 context.Context) error {
	return W.WDo(a0)
}

// _github_com_chromedp_chromedp_PollAction is an interface wrapper for PollAction type
type _github_com_chromedp_chromedp_PollAction struct {
	IValue interface{}
	WDo    func(a0 context.Context) error
}

func (W _github_com_chromedp_chromedp_PollAction) Do(a0 context.Context) error {
	return W.WDo(a0)
}

// _github_com_chromedp_chromedp_QueryAction is an interface wrapper for QueryAction type
type _github_com_chromedp_chromedp_QueryAction struct {
	IValue interface{}
	WDo    func(a0 context.Context) error
}

func (W _github_com_chromedp_chromedp_QueryAction) Do(a0 context.Context) error {
	return W.WDo(a0)
}

// _github_com_chromedp_chromedp_Transport is an interface wrapper for Transport type
type _github_com_chromedp_chromedp_Transport struct {
	IValue interface{}
	WClose func() error
	WRead  func(a0 context.Context, a1 *cdproto.Message) error
	WWrite func(a0 context.Context, a1 *cdproto.Message) error
}

func (W _github_com_chromedp_chromedp_Transport) Close() error {
	return W.WClose()
}
func (W _github_com_chromedp_chromedp_Transport) Read(a0 context.Context, a1 *cdproto.Message) error {
	return W.WRead(a0, a1)
}
func (W _github_com_chromedp_chromedp_Transport) Write(a0 context.Context, a1 *cdproto.Message) error {
	return W.WWrite(a0, a1)
}
